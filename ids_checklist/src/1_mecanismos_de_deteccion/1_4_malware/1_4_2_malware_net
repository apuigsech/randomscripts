#!/usr/bin/env bash

TEST_NAME="1.4.2. Transmisión de tráfico malware"
TEST_VERSION="1.0"

SAMPLES_DIR="network"

NCAT_BIN=`which nc` 
TCPPREP_BIN=`which tcpprep`
TCPREWRITE_BIN=`which tcprewrite`
TCPREPLAY_BIN=`which tcpreplay`
DATE_FORMAT="+%d/%m/%y %H:%M:%S"

TASK_BREAKTIME=10


function banner () {
	echo "################################################################################"
	echo "# ${TEST_NAME} (${TEST_VERSION})"
	echo "################################################################################"
}

function estimate_time () {
	local life_etime=$(expr 20 \* 5)
	local break_etime=$(expr $TASK_BREAKTIME \* 4)
	local etime=$(expr $life_etime + $break_etime)
	etime=$(expr $etime \/ 60)
	echo "Estimated time: ${etime} minutes"
}

function usage () {
	echo "Usage:"
	echo "  ${0} <target_ip> <target_port>"
}

function write_log () {
	local msg=$1
	local time=`date "$DATE_FORMAT"`
	echo "[${time}] ${msg}"
}

function exec_task () {
	local cmd=$1
	write_log "RUN: ${cmd}"
	echo $cmd | bash &> /dev/null
}

function exec_task_timeout() {
	local cmd=$1
	local timeout=$2
	write_log "TASK START"
	exec_task "$cmd"
#	{ sleep $timeout; kill -9 $task_pid; }	
	write_log "TASK END"
}

#	tcpprep --port --cachefile=$PCAP.cache --pcap=$PCAP
#	tcprewrite --endpoints=$ETH0:$ETH1 --cachefile=$PCAP.cache --infile=$PCAP --outfile=$PCAP.new.pcap
#	sudo tcpreplay --topspeed --intf1=$IF0 --intf2=$IF1 --cachefile=$PCAP.cache $PCAP.new.pc

function run_test () {
	local source_ip=$1
	local target_ip=$2
	for filename in $(find ${SAMPLES_DIR} -type f); do
		write_log "TASK START ${filename}"
		local cache_filename="$(mktemp).$(echo $filename | sed 's/\//_/g').cache"
		local new_filename="$(mktemp).$(echo $filename | sed 's/\//_/g').new"
		exec_task "${TCPPREP_BIN} --port --cachefile=${cache_filename} --pcap=${filename}"
		exec_task "${TCPREWRITE_BIN} --endpoints=${source_ip}:${target_ip} --cachefile=${cache_filename} --infile=${filename} --outfile=${new_filename}"
		#
		# ¡¡¡¡ALERT!!!!
		# change intf1 argument
		#
		exec_task "${TCPREPLAY_BIN} --intf1 lo --topspeed --cachefile=${cache_filename} ${new_filename}"
		write_log "TASK END ${filename}"
		sleep ${TASK_BREAKTIME}
	done
}

function main () {
	banner
	if [ $# -lt 2 ]; then
		usage
		exit 1
	else
		source_ip=$1
		target_ip=$2
	fi

	estimate_time

	run_test $source_ip $target_ip
}

main $1 $2
